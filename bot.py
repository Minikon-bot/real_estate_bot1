import os
import logging
import asyncio
import json
from datetime import datetime

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackContext,
)

import aiohttp
from bs4 import BeautifulSoup

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    logger.error("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")
    exit(1)

SUBSCRIBERS_FILE = "subscribers.json"
SENT_IDS_FILE = "sent_ids.json"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ JSON
def load_subscribers():
    if not os.path.exists(SUBSCRIBERS_FILE):
        return set()
    with open(SUBSCRIBERS_FILE, "r", encoding="utf-8") as f:
        return set(json.load(f))

def save_subscribers(subscribers):
    with open(SUBSCRIBERS_FILE, "w", encoding="utf-8") as f:
        json.dump(list(subscribers), f, ensure_ascii=False)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def load_sent_ids():
    if not os.path.exists(SENT_IDS_FILE):
        return set()
    with open(SENT_IDS_FILE, "r", encoding="utf-8") as f:
        return set(json.load(f))

def save_sent_ids(sent_ids):
    with open(SENT_IDS_FILE, "w", encoding="utf-8") as f:
        json.dump(list(sent_ids), f, ensure_ascii=False)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π Otodom.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /subscribe —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /unsubscribe —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è."
    )

# –ö–æ–º–∞–Ω–¥–∞ /subscribe
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    subscribers = load_subscribers()
    if user_id in subscribers:
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        return
    subscribers.add(user_id)
    save_subscribers(subscribers)
    await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!")

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    subscribers = load_subscribers()
    if user_id not in subscribers:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        return
    subscribers.remove(user_id)
    save_subscribers(subscribers)
    await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")

# –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Otodom, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def parse_otodom():
    url = "https://www.otodom.pl/pl/oferty/sprzedaz/mieszkanie/poznan"  # –ø—Ä–∏–º–µ—Ä –¥–ª—è –ü–æ–∑–Ω–∞–Ω–∏
    headers = {
        "User-Agent": "Mozilla/5.0 (compatible; Bot/1.0)"
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            if resp.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Otodom: {resp.status}")
                return []
            text = await resp.text()
            soup = BeautifulSoup(text, "html.parser")

            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Otodom (–Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é)
            offers = soup.select("article[data-cy='listing-item']")
            results = []
            for offer in offers:
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ data-id –∏–ª–∏ –∏–∑ —Å—Å—ã–ª–∫–∏)
                offer_id = offer.get("data-id")
                if not offer_id:
                    continue
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                title = offer.select_one("a[data-cy='listing-item-link']").get_text(strip=True)
                # –°—Å—ã–ª–∫–∞
                link = offer.select_one("a[data-cy='listing-item-link']")["href"]
                if not link.startswith("http"):
                    link = "https://www.otodom.pl" + link
                # –¶–µ–Ω–∞
                price_tag = offer.select_one("span[data-cy='price']")
                price = price_tag.get_text(strip=True) if price_tag else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                results.append({
                    "id": offer_id,
                    "title": title,
                    "link": link,
                    "price": price,
                })
            return results

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
async def send_new_offers(app):
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π {datetime.now()}")
    subscribers = load_subscribers()
    if not subscribers:
        logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É")
        return

    sent_ids = load_sent_ids()
    offers = await parse_otodom()
    new_offers = [o for o in offers if o["id"] not in sent_ids]

    if not new_offers:
        logger.info("–ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
        return

    for offer in new_offers:
        message = f"üè† {offer['title']}\nüí∞ {offer['price']}\nüîó {offer['link']}"
        for user_id in subscribers:
            try:
                await app.bot.send_message(chat_id=user_id, text=message)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
        sent_ids.add(offer["id"])

    save_sent_ids(sent_ids)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(new_offers)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def periodic_check(app):
    while True:
        try:
            await send_new_offers(app)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(periodic_check(app))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
